generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String?    @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  friends       Friendship[] @relation(name: "friends")
  friendsOf     Friendship[] @relation(name: "friendsOf")
  conversations ConversationParticipant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id          String    @id @default(cuid())
  particpants ConversationParticipant[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ConversationParticipant {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  conversationId  String       
  conversation    Conversation  @relation(fields: [conversationId], references: [id])

  @@index([userId])
  @@index([conversationId])
}

model Friendship {
  id        Int       @id @default(autoincrement())
  userId    String
  friendId  String
  user      User      @relation(name: "friends", fields: [userId], references: [id])
  friend    User      @relation(name: "friendsOf", fields: [friendId], references: [id])
  status    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, friendId])
  @@index([friendId])
}