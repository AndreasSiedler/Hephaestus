generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String                    @id @default(cuid())
  username        String                    @unique
  name            String?
  email           String?                   @unique
  emailVerified   DateTime?
  image           String?
  company         String?
  blog            String?
  location        String?
  hireable        Boolean?
  bio             String?
  followers       Int                       @default(0)
  following       Int                       @default(0)
  createdAtGithub DateTime?
  updatedAtGithub DateTime?
  accounts        Account[]
  sessions        Session[]
  friends         Friendship[]              @relation(name: "friends")
  friendsOf       Friendship[]              @relation(name: "friendsOf")
  conversations   ConversationParticipant[]
  messages        Message[]
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @default(now()) @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id              String                    @id @default(cuid())
  messages        Message[]
  latestMessageId String?                   @unique
  latestMessage   Message?                  @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  participants    ConversationParticipant[]
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
}

model ConversationParticipant {
  id                   String       @id @default(cuid())
  userId               String
  user                 User         @relation(fields: [userId], references: [id])
  conversationId       String
  conversation         Conversation @relation(fields: [conversationId], references: [id])
  hasSeenLatestMessage Boolean
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  @@index([userId])
  @@index([conversationId])
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  isLatestIn     Conversation? @relation(name: "latestConversationMessage")
  body           String
  senderId       String
  sender         User          @relation(fields: [senderId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([conversationId])
  @@index([senderId])
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(name: "friends", fields: [userId], references: [id])
  friendId  String
  friend    User     @relation(name: "friendsOf", fields: [friendId], references: [id])
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, friendId])
  @@index([friendId])
}
